@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.Extensions.Configuration
@using Newtonsoft.Json.Linq
@using QStack.MsalClient
@using Microsoft.Identity.Client;
@using System.IdentityModel.Tokens.Jwt;

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IPCAWrapper _pcaWrapper;
@inject IConfiguration _configuration;

@if (IsLoggedIn)
{
    <button class="btn btn-link" @onclick="OnLogoutClicked">Logout</button>
    @if (activeUser != null && activeUser != "")
    {
        <p>@activeUser</p>
    }
}
else
{
    <button class="btn btn-link" @onclick="OnLoginClicked">Login</button>
}

@code
{
    string? activeUser;
    private bool collapseNavMenu = true;
    bool _isLoggedIn = false;

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(500);
        if (IsLoggedIn == true)
        {
            _isLoggedIn = true;
        }
        else
        {
            _isLoggedIn = false;
        }
    }
    public bool IsLoggedIn
    {
        get => _isLoggedIn;
        set
        {
            if (_isLoggedIn == value) return;
            _isLoggedIn = value;
            InvokeAsync(StateHasChanged);
        }
    }

    private async void OnLoginClicked()
    {
        IsLoggedIn = false;
        System.Diagnostics.Debug.WriteLine($"QSDebug - IsLoggedIn = {IsLoggedIn}");

        try
        {
            // Attempt silent login, and obtain access token.
            var result = await _pcaWrapper.AcquireTokenSilentAsync(_pcaWrapper.Scopes).ConfigureAwait(false);

            // Set access token.
            Globals.AccessToken = result?.AccessToken;
            if (Globals.AccessToken != null)
                IsLoggedIn = true;
        }
        // A MsalUiRequiredException will be thrown, if this is the first attempt to login, or after logging out.
        catch (MsalUiRequiredException)
        {
            try
            {
                // Perform interactive login, and obtain access token.
                var result = await _pcaWrapper.AcquireTokenInteractiveAsync(_pcaWrapper?.Scopes).ConfigureAwait(false);

                // Set access token.
                Globals.AccessToken = result?.AccessToken;
                if (Globals.AccessToken != null)
                    IsLoggedIn = true;

                var handler = new JwtSecurityTokenHandler();
                var jwtSecurityToken = handler.ReadJwtToken(result.IdToken);

                activeUser = jwtSecurityToken.Claims.First(claim => claim.Type == "name").Value.ToString();
            }
            catch (Exception ex)
            {
                // Ignore.
                System.Diagnostics.Debug.WriteLine($"QSDebug - LIComp Exception caught: {ex}");
            }
        }
        catch
        {
            IsLoggedIn = false;
            System.Diagnostics.Debug.WriteLine($"QSDebug - IsLoggedIn: {IsLoggedIn}");
        }

    }

    private async void OnLogoutClicked()
    {
        await _pcaWrapper.SignOutAsync().ConfigureAwait(false);
        IsLoggedIn = false;
        Globals.AccessToken = null;
    }
}