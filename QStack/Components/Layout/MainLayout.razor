@using Microsoft.Extensions.Configuration
@using Newtonsoft.Json.Linq
@using QStack.MsalClient
@using Microsoft.Identity.Client;
@using System.IdentityModel.Tokens.Jwt;
@using QStack.DataAccess.Interfaces;
@using QStack.DataAccess.Models;
@using QStack.Shared.States
@using System.Security.Claims
@using static ExternalAuthStateProvider

@inherits LayoutComponentBase
@inject IPCAWrapper _pcaWrapper;
@inject IConfiguration _configuration;
@inject IPeopleData _db
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="page">
    <div style="background-image:none;background-color:cadetblue;" class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">
            @if (IsLoggedIn)
            {
                <button class="btn btn-link" @onclick="OnLogoutClicked">Logout</button>
                @if (activeUser != null && activeUser != "")
                {
                    <p>@activeUser</p>
                }
            }
            else
            {
                <button class="btn btn-link" @onclick="OnLoginClicked">login</button>
            }
        </div>
        <article class="content px-4">
            <CascadingValue Value="@FoundActiveUser">
                @Body
            </CascadingValue>
        </article>
    </main>
</div>
@code {
    string? activeUser;
    string? activeOId;
    private bool collapseNavMenu = true;
    bool _isLoggedIn = false;
    bool _isNewUser = false;
    private PersonModel newPerson = new PersonModel();
    public string? ActiveUser;
    [CascadingParameter]
    public string? FoundActiveUser { get; set; }
    private PlayersState? _playersState;
    private string? authMessage;
    private string? surname;
    private IEnumerable<Claim> claims = Enumerable.Empty<Claim>();
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }
    private bool _isAuthenticated = false;

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(500);

        var user = (await authenticationState).User;
        if (authenticationState is not null)
        {

            if (user?.Identity is not null && user.Identity.IsAuthenticated)
            {
                authMessage = $"{user.Identity.Name} is authenticated.";
            }
        }
        _playersState = PlayersState.Instance;

        if(IsLoggedIn == true)
        {
            _isLoggedIn = true;
        }
        else
        {
            _isLoggedIn = false;
        }
    }

    public bool IsLoggedIn
    {
        get => _isLoggedIn;
        set
        {
            if (_isLoggedIn == value) return;
            _isLoggedIn = value;
            InvokeAsync(StateHasChanged);
        }
    }

    private async void OnLoginClicked()
    {
        IsLoggedIn = false;
        System.Diagnostics.Debug.WriteLine($"QSDebug - IsLoggedIn = {IsLoggedIn}");

        try
        {
            // Attempt silent login, and obtain access token.
            var result = await _pcaWrapper.AcquireTokenSilentAsync(_pcaWrapper.Scopes).ConfigureAwait(false);

            // Set access token.
            Globals.AccessToken = result?.AccessToken;
            if (Globals.AccessToken != null)
                IsLoggedIn = true;
        }
        // A MsalUiRequiredException will be thrown, if this is the first attempt to login, or after logging out.
        catch (MsalUiRequiredException)
        {
            try
            {
                // Perform interactive login, and obtain access token.
                AuthenticationResult result = await _pcaWrapper.AcquireTokenInteractiveAsync(_pcaWrapper?.Scopes).ConfigureAwait(false);

                // Set access token.
                Globals.AccessToken = result?.AccessToken;
                if (Globals.AccessToken != null)
                    IsLoggedIn = true;

                var handler = new JwtSecurityTokenHandler();
                var jwtSecurityToken = handler.ReadJwtToken(result.IdToken);
                activeUser = jwtSecurityToken.Claims.First(claim => claim.Type == "name").Value.ToString();
                activeOId  = jwtSecurityToken.Claims.First(claim => claim.Type == "oid").Value.ToString();
                ClaimsIdentity identity = new ClaimsIdentity(jwtSecurityToken.Claims, "test");

                // if (jwtSecurityToken.Claims.First(claim => claim.Type.Contains("newUser")))
                // {
                //     if (jwtSecurityToken.Claims.First(claim => claim.Type == "newUser").Value.ToString() == "true")
                //     {                        
                //         newPerson.UserName = activeUser;
                //         newPerson.FirstName = activeUser;
                //         newPerson.LastName = activeUser;
                //         newPerson.UUId = activeOId;
                //         // "emails": [
                //         //         "kemalsekic@gmail.com"
                //         //           ],
                //         newPerson.EmailAddress = "test@gmail.com";
                //         _isNewUser = true;
                //         await _db.InsertPersonwithOId(newPerson);
                //     }
                // }

                await Login(identity);
                if (authenticationState is not null)
                {
                    var authState = await authenticationState;
                    var user = authState?.User;

                    if (user?.Identity is not null && user.Identity.IsAuthenticated)
                    {
                        authMessage = $"{user.Identity.Name} is authenticated.";
                        // System.Diagnostics.Debug.WriteLine($"QSDebug[MainLayout] - user:  {user.Claims.First(claim => claim.Type == "name").Value.ToString()}");
                    }
                }
            }
            catch (Exception ex)
            {
                // Ignore.
                System.Diagnostics.Debug.WriteLine($"QSDebug - MainL Exception caught: {ex}");
            }
        }
        catch
        {
            IsLoggedIn = false;
            System.Diagnostics.Debug.WriteLine($"QSDebug - IsLoggedIn: {IsLoggedIn}");
        }

    }

    public async Task Login(ClaimsIdentity identity)
    {
        await ((ExternalAuthStateProvider)AuthenticationStateProvider)
            .LogInAsync();
        await ((ExternalAuthStateProvider)AuthenticationStateProvider).SetAuthenticated(identity);
    }

    private async void OnLogoutClicked()
    {
        await _pcaWrapper.SignOutAsync().ConfigureAwait(false);
        IsLoggedIn = false;
        Globals.AccessToken = null;
    }
}
